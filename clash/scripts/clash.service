#!/system/bin/sh

bin_name="clash"
bin_path="/system/bin/${bin_name}"
data_path="/sdcard/Documents/${bin_name}"
run_path="${data_path}/run"
pid_file="${run_path}/${bin_name}.pid"
error_log="${run_path}/error.log"
bin_opts="-d ${data_path}"
conf_file="${data_path}/config.yaml"
mark_id="1000"
table_id="100"
tun_device_name="utun"
tun_ip="198.18.0.0/16"
tun_path="/dev/tun"

create_tun_link() {
    mkdir -p /dev/net
    if [ ! -L /dev/net/tun ] ; then
        ln -s ${tun_path} /dev/net/tun
    fi
}

del_tun_link() {
    if [ -L /dev/net/tun ] ; then
        rm -rf /dev/net
    fi
}

add_ip_rule() {
    ip rule add fwmark ${mark_id} lookup ${table_id} pref 5000
    ip rule add from ${tun_ip} lookup ${table_id} pref 14000
}

del_ip_rule() {
    ip rule del fwmark ${mark_id} lookup ${table_id} pref 5000
    ip rule del from ${tun_ip} lookup ${table_id} pref 14000
}

add_ip_route() {
    ip route add default dev ${tun_device_name} table ${table_id}
    ip route add ${tun_ip} dev ${tun_device_name} table ${table_id}
}

flush_ip_route() {
    ip route flush table_id ${table_id}
}

probe_clash_alive() {
    [ -f ${pid_file} ] && cmd_file="/proc/`cat ${pid_file}`/cmdline" || return 1
    [ -f ${cmd_file} ] && grep -q ${bin_path} ${cmd_file} && return 0 || return 1
}

display_clash_pid() {
  if probe_clash_alive ; then
    echo "[Info]: ${bin_name} service is running. ( PID: `cat ${pid_file}` )"
    return 0
  else
    echo "[Info]: ${bin_name} service is stopped."
    return 1
  fi
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

wait_clash_listen() {
    wait_count=0
    clash_pid=`cat ${pid_file}`
    find_netstat_path && \
    check_clash_cmd="netstat -tnlp | grep clash | grep -q LISTEN" || \
    check_clash_cmd="ls -lh /proc/${clash_pid}/fd | grep -q socket"
    while probe_clash_alive && ! eval "${check_clash_cmd}" && [ ${wait_count} -lt 100 ] ; do
        sleep 1 ; wait_count=$((${wait_count} + 1))
    done
    if probe_clash_alive && eval "${check_clash_cmd}" ; then
        return 0
    else
        return 1
    fi
}

start_service() {
    if probe_clash_alive ; then
        echo "[Info]: ${bin_name} service is running. ( PID: `cat ${pid_file}` )"
        return 0
    elif [ -f ${conf_file} ] && ${bin_name} ${bin_opts} -t ; then
        echo "[Info]: Starting ${bin_name} service"
        mkdir -p ${run_path}
        chown root:sdcard_rw ${bin_path}
        chmod 6755 ${bin_path}
        create_tun_link
        nohup ${bin_path} ${bin_opts} &> ${error_log} &
        echo -n $! > ${pid_file}
        sleep 1
        add_ip_route
        add_ip_rule
        if wait_clash_listen ; then
            echo "[Info]: ${bin_name} service is running. ( PID: `cat ${pid_file}` )"
            return 0
        else
            if probe_clash_alive ; then
                echo "[Warning]: ${bin_name} service is running but may not listening. ( PID: `cat ${pid_file}` )"
                return 0
            else
                echo "[Error]: Start ${bin_name} service Failed."
                rm -f ${pid_file}
                return 1
            fi
        fi
    else
        return 2
    fi
}

stop_service() {
    if display_clash_pid ; then
        echo "[Info]: Stopping ${bin_name} service."
        kill `cat ${pid_file}`
        del_tun_link
        sleep 1
        del_ip_rule
        flush_ip_route
        display_clash_pid
    fi
    rm -f ${pid_file}
}

case "$1" in
  start)
    start_service
    ;;
  stop)
    stop_service
    ;;
  restart)
    stop_service
    start_service
    ;;
  status)
    display_clash_pid
    ;;
  *)
    echo "$0:  usage:  $0 {start|stop|restart|status}"
    ;;
esac